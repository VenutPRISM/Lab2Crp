Лабораторная работа №2.
Шифрование файлов. Четыре криптопримитива.
Цель работы: реализовать четыре основных криптографических примитива.
Постановка задачи: написать программу, осуществляющую шифрование и дешифрование
произвольных файлов при помощи четырех примитивных криптоалгоритмов. Допускается как
реализация всех криптоалгоритмов в разных программах, так и в одной программе,
запускаемой в разных режимах. Программа должна генерировать ключ, сохранять его в
ключевом файле, считывать ключ из ключевого файла, шифровать данный файл по ключу и
расшифровывать закрытый файл.
Криптографический примитив – это несложный по времени и оперативной памяти
обратимый алгоритм шифрования. На основе композиций криптографических примитивов
можно создавать стойкие криптоалгоритмы.
1. Простая подстановка. Каждый байт из входного файла заменяется на другой байт
согласно ключу. (Одинаковые байты будут заменяться одинаковыми значениями.) Ключом
является последовательность байтов от 0 до 255, перемешанная случайным образом. В ключе
каждое значение встречается ровно один раз. Для расшифровки удобно сгенерировать ключ
обратной подстановки.
2. Перестановка (транспозиция). Из входного файла считывается блок данных, равный
длине ключа. Байты в блоке переставляются согласно ключу. Перемешанный блок
записывается в выходной файл. Ключом является последовательность чисел от 1 до N,
перемешанная случайным образом, где N – длина блока. В ключе каждое значение встречается
ровно один раз. Пример: если ключ 642351, а блок “ABCDEF”, то результатом перестановки
будет “FDBCEA”. Для расшифровки удобно сгенерировать ключ обратной перестановки.
Рассмотреть случай, когда размер файла не кратен длине ключа. В этом случае при
шифровании оставшийся «хвостик» можно дополнить до целого блока, а при дешифровании –
отбросить лишние значения. Другой способ – сгенерировать по исходному ключу другой ключ
меньшей длины.
3. Гаммирование (шифр Виженера). Из входного файла считывается блок данных, равный
длине ключа. На каждый байт блока накладывается соответствующий байт ключа (гаммы) при
помощи операции «исключающее ИЛИ» (xor, ^) или сложения (+). Результат наложения
записывается в выходной файл. Ключом является случайная последовательность байт или
символов произвольной длины. Для расшифровки файла выполняем наложение того же ключа
еще раз операцией «xor» или вычитанием соответственно.
4. Одноразовый блокнот (шифр Вернама). Этот метод аналогичен гаммированию, но
ключом является случайная последовательность байт, длиной равная размеру входного файла.
Одноразовый блокнот лишь с большой натяжкой можно отнести к криптографическим
примитивам. Создание истинно случайной последовательности ключа – операция чрезвычайно
дорогая по времени и размерам оперативной памяти.
Метод проверки: файл произвольной структуры длиной несколько мегабайт сначала
шифруется одним из криптоалгоритмов, затем дешифруется. Результат дешифрования
побайтно сравнивается с исходным файлом (например, программой fc). Если файлы
совпадают, то проверка пройдена. Проверка проводится для всех четырех криптопримитивов.
